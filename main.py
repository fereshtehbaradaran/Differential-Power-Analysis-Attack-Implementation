from calculateSboxOutput import calculateSboxOutput
import numpy as np

key = [0 for i in range (16)] # 16 byte
plainText = [[0x25, 0xeb, 0x8c, 0x48, 0xff, 0x89, 0xcb, 0x85, 0x4f, 0xc0, 0x90, 0x81, 0xcc, 0x47, 0xed, 0xfc],
    [0x86, 0x19, 0xb2, 0x14, 0xfe, 0x65, 0x92, 0xd4, 0x8b, 0xfc, 0xea, 0x9c, 0x9d, 0x8e, 0x32, 0x44], 
    [0xd7, 0xd7, 0xe9, 0xf1, 0xf7, 0xde, 0x60, 0x56, 0x8d, 0xe9, 0x89, 0x07, 0x3f, 0x3d, 0x16, 0x39], 
    [0x01, 0x80, 0x3c, 0xd1, 0x08, 0xd8, 0x8d, 0x73, 0xaf, 0xea, 0x79, 0xc8, 0x1e, 0x47, 0x83, 0xc6], 
    [0x95, 0x31, 0x39, 0x03, 0xc4, 0x18, 0xf1, 0x2b, 0x4c, 0x1a, 0x34, 0x50, 0x6d, 0x73, 0x29, 0xd2]] # 2D array
traces = [] #2D array

numberOfTraces  = 5
traceSize = 370 * 1000

for i in range(len(key)):
    
    meanDiffs = np.zeros(256)
    
    for guess in range(256):
        
        one_list = []
        zero_list = []
        
        for traceIndex in range(numberOfTraces):
            temp = calculateSboxOutput(plainText[traceIndex][i], guess)
    
            if temp & 0x01:        
                one_list.append(traces[traceIndex])
            else:
                zero_list.append(traces[traceIndex])
                
            
        one_avg = np.asarray(one_list).mean(axis=0)
        zero_avg = np.asarray(zero_list).mean(axis=0)
        meanDiffs[guess] = np.max(abs(one_avg - zero_avg))
        
        
    key[i] = meanDiffs.index(max(meanDiffs))
    
print(key)